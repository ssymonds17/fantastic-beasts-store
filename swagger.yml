swagger: '2.0'

info:
  description: 'Fantastic Beasts Store API'
  version: '1.0.0'
  title: 'Fantastic Beasts REST API'

schemes:
  - http

basePath: '/'

paths:
  /auth/register:
    post:
      tags:
        - 'Auth'
      summary: 'Register a new user'
      description: 'This endpoint registers a new user to the database'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Register'
      responses:
        200:
          description: User successfully registered
        409:
          description: Conflict with credentials
        500:
          description: Internal Server Error
  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: 'User login'
      description: 'This endpoint allows an existing user to login'
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: User successfully logged on
        409:
          description: Conflict with credentials
        500:
          description: Internal Server Error
  /users/{userId}:
    get:
      tags:
        - 'Users'
      summary: 'Get a user by ID'
      produces:
        - 'application/json'
      parameters:
        - name: userId
          description: String ID of the user to get
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned user
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: User not found
    put:
      tags:
        - 'Users'
      summary: 'Updates a single user by id'
      produces:
        - 'application/json'
      parameters:
        - name: userId
          description: String ID of the user to update
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/UpdateUser'
      responses:
        200:
          description: Successfully updated user
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    delete:
      tags:
        - 'Users'
      summary: 'Deletes a single user by id'
      produces:
        - 'application/json'
      parameters:
        - name: userId
          description: String ID of user to delete
          in: path
          required: true
          type: string
      responses:
        200:
          description: User successfully deleted
  /users/check/{email}:
    get:
      tags:
        - 'Users'
      summary: 'Returns a single user by email'
      produces:
        - 'application/json'
      parameters:
        - name: email
          description: String email of user to get
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully returned user
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: User not found
  /products:
    get:
      tags:
        - 'Products'
      summary: 'Returns all products'
      produces:
        - 'application/json'
      responses:
        200:
          description: Successfully returned all products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
  /products/{productId}:
    get:
      tags:
        - 'Products'
      summary: 'Get a user by ID'
      produces:
        - 'application/json'
      parameters:
        - name: productId
          description: Numeric ID of product to get
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Successfully returned single product
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        404:
          description: Product not found
  /orders:
    get:
      tags:
        - 'Orders'
      summary: 'Returns all orders'
      produces:
        - 'application/json'
      parameters:
      responses:
        200:
          description: Successfully returned orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
    post:
      tags:
        - 'Orders'
      summary: 'Creates a new user order'
      produces:
        - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/PostOrder'
      responses:
        200:
          description: Successfully created new order
        409:
          description: Order with same order number already exists
  /orders/{orderId}:
    get:
      tags:
        - 'Orders'
      summary: 'Get an order by ID'
      produces:
        - 'application/json'
      parameters:
        - name: orderId
          description: Numeric ID of order to get
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Successfully returned single order
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        404:
          description: Order not found
  /orders/user/{userId}:
    get:
      tags:
        - 'Orders'
      summary: 'Get orders by user ID'
      produces:
        - 'application/json'
      parameters:
        - name: userId
          description: String ID of user linked to order to get
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successfully returned all orders for user
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      password:
        type: string
        format: password
      created:
        type: string
        format: date-time
  Product:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      price:
        type: integer
        format: int64
      image:
        type: string
  Order:
    type: object
    properties:
      order_number:
        type: integer
        format: int64
      order_date:
        type: string
        format: date-time
      total:
        type: integer
        format: int64
      customer_id:
        type: string
components:
  schemas:
    Register:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - email
          password
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - email
          password
    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    PostOrder:
      type: object
      properties:
        customer_id:
          type: string
        total:
          type: integer
          format: int64
